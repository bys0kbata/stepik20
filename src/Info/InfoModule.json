{"data":[
    {   
        "id": 0,
        "name":"История Интернета",
        "count":"countHTML",
        "textModule": " История Интернета началась с разработки компьютеров и появления концепций глобальных вычислительных сетей в 1950-е годы почти одновременно в разных странах, в первую очередь в научных и военных лабораториях в США, Великобритании и Франции[1]. Военные вычислительные сети в те времена существовали и в СССР, но были засекречены, а проект гражданской сети ОГАС (1959) не был реализован в силу бюрократизма советской системы[2]. Тем не менее, в 1978 году в СССР появляется совместимая с Интернетом гражданская Академсеть (X.25). Принципы, по которым строится Интернет, впервые были применены в сети ARPANET, созданной в 1969 году по заказу американского военного агентства DARPA и изначально соединявшей ведомства под контролем Министерства обороны США. Со временем к ней стали подключаться и гражданские учреждения, в связи с чем, используя наработки ARPANET, в 1984 году Национальный научный фонд США (NSF) создал сеть NSFNET для связи между университетами и вычислительными центрами. В отличие от закрытой ARPANET подключение к NSFNET было достаточно свободным, и к 1992 году к ней подключились более 7500 мелких сетей, включая 2500 за пределами США. В организационном смысле современный Интернет появился в первой половине 1990-х с передачей опорной сети NSFNET в коммерческое использование, присоединением к ней параллельной глобальной академической сети BITNET[3] и других сетей. В техническом смысле их объединили транспортный протокол цифровой связи TCP/IP и система его буквенной адресации DNS.  До 1980-х годов компьютерные сети были доступны в основном сотрудникам специализированных учреждений, а в 1980-х годах начинается распространение персональных компьютеров (ПК) в частном пользовании, в первую очередь домашних компьютеров, что породило массовый спрос на сети (которому предшествовала ручная передача носителей). Если специалисты в основном использовали сети для научно-производственных задач, то частные лица прежде всего проявили интерес к общению, новостям, играм и обмену файлами. Первой популярной сетевой технологией, решавшей эти задачи, была Usenet («Юзнет»), запущенная в 1980 году и ставшая относительно массовой сетью обмена компьютерной информацией. Базовой технологией Юзнета была электронная почта, основанная на идее связи между двумя абонентами. Но массовая природа Юзнета потребовала технологий вещания на множество абонентов, в связи с чем на базе электронной почты стали создаваться так называемые ньюзгруппы, на смену которым впоследствии пришли интернет-форумы, блоги и социальные сети.Массовые пользователи ранних сетей обычно соединялись с помощью телефонных модемов, «выделенные линии» для компьютерных сетей долгое время считались в их среде экзотикой и роскошью. Кроме Usenet с середины 1980-х годов в США развивались телефонные сервисы для сетевых игр на домашних ПК, из которых впоследствии был сформирован провайдер America Online. В 1993 году America Online реализовал функцию подключения к Usenet, что стало важным этапом формирования Интернета (см. «Вечный сентябрь»). С Интернетом через гейты соединялись также другие большие сети, — FIDONet, BITNET, сети X.25 (SFMT/SovAmNet) и др., — вливаясь затем в «общий» Интернет. В целях объединения всех сетей были глобально внедрены изначально разработанные для ARPANET технологии адресации компьютеров (системы IP-адресов и доменных имён) и маршрутизации между ними, объединённые т. н. моделью OSI. Для стандартизации этих технологий и управления ими были созданы глобальные общественные организации, такие как ICANN, IETF, IANA и другие. Следом были созданы локальные организации для отдельных регионов, такие как РосНИИРОС, LACNIC, AFNIC и другие."
    },
    {   
        "id": 1,
        "name":"DOCTYPE",
        "count":"countHTML",
        "textModule": "DOCTYPE (Document Type Declaration) - это объявление типа документа в HTML, которое сообщает браузеру о версии HTML или XHTML, используемой в веб-странице. DOCTYPE располагается в начале HTML-документа и помогает браузеру правильно интерпретировать содержимое страницы. Основная цель DOCTYPE - уведомить браузер о том, какая версия HTML (или XHTML) используется в документе, чтобы он корректно отображал содержимое страницы. Без объявления DOCTYPE браузер может перейти в режим совместимости и отобразить страницу не так, как задумано. Пример DOCTYPE для HTML5: <!DOCTYPE html> <html> <head><title>Пример страницы с DOCTYPE</title></head><body><h1>Привет, мир!</h1><p>Это пример использования DOCTYPE для HTML5.</p></body></html>В данном примере <!DOCTYPE html> указывает, что документ использует стандарт HTML5. DOCTYPE обычно является первой строкой в HTML-документе и позволяет браузеру правильно интерпретировать разметку и структуру страницы.Таким образом, использование DOCTYPE является важным шагом при создании веб-страниц, чтобы обеспечить их правильное отображение в различных браузерах."
    },
    {   
        "id": 2,
        "name":"Теги",
        "count":"countHTML",
        "textModule": "HTML использует различные теги для структурирования содержимого веб-страницы. Вот некоторые основные теги HTML: 1. <html> - определяет начало и конец HTML документа. 2. <head> - содержит метаинформацию о документе, такую как заголовок, ссылки на стили и скрипты. 3. <title> - задает заголовок документа, отображаемый во вкладке браузера. 4. <body> - определяет основное содержимое документа, отображаемое на веб-странице.5. <h1>, <h2>, <h3>, <h4>, <h5>, <h6> - теги для заголовков разного уровня.6. <p> - создает абзац текста. 7. <a> - создает ссылку на другую страницу или ресурс.8. <img> - вставляет изображение на страницу.9. <ul> и <ol> - теги для создания неупорядоченного и упорядоченного списков соответственно. 10. <li> - элемент списка внутри тегов <ul> или <ol>.11. <div> - используется для группировки содержимого и создания блочных элементов.12. <span> - аналогичен <div>, но создает строчный элемент.13. <table>, <tr>, <td>, <th> - для создания таблицы.14. <form> - создает форму для ввода данных.15. <input> - элемент для ввода данных в форму.16. <button> - создает кнопку.17. <textarea> - поле для ввода многострочного текста.18. <label> - задает метку для элемента формы. 19. <iframe> - встраивает другой документ в текущий документ. Это лишь небольшой список самых распространенных тегов HTML. С их помощью можно создавать разнообразное содержимое на веб-страницах."
    },
    {   
        "id": 4,
        "name":"Основы",
        "count":"countCSS",
        "textModule": "Конечно, давай поговорим о основах CSS (Cascading Style Sheets) - это язык стилей, который используется для оформления веб-страниц. CSS позволяет задавать внешний вид элементов HTML, таких как цвет текста, размер шрифта, отступы, рамки, расположение элементов и многое другое. Вот несколько основных концепций CSS:1. **Селекторы**: С помощью селекторов вы выбираете элементы, к которым будут применяться стили. Например, селектор h1 выбирает все элементы заголовка первого уровня.2. **Свойства и значения**: Свойства определяют внешний вид элемента, а значения устанавливают конкретные параметры. Например, свойство color задает цвет текста, а значение red устанавливает красный цвет.3. **Каскадирование и приоритеты**: Если несколько правил CSS применяются к одному элементу, используется механизм каскадирования, определяющий порядок применения стилей. Приоритеты могут быть определены с помощью специфичности селекторов и порядка их объявления.4. **Классы и идентификаторы**: Классы и идентификаторы позволяют создавать многоразовые стили, которые можно применять к разным элементам. Классы определяются с помощью точки (.), а идентификаторы - с помощью решетки (#).5. **Наследование**: Некоторые свойства CSS могут наследоваться от родительских элементов. Например, если установить цвет текста для <body>, все текстовые элементы внутри <body> унаследуют этот цвет, если для них не будет явно установлено другое значение.6. **Единицы измерения**: CSS поддерживает различные единицы измерения, такие как пиксели (px), проценты (%), единицы em и rem, а также другие. Эти единицы позволяют задавать размеры элементов и отступы относительно разных значений.Используя эти основы CSS, вы сможете творить удивительные дизайны для своих веб-страниц! Если у тебя есть какие-то конкретные вопросы или задачи, спрашивай - я всегда готова помочь!"
    },
    {   
        "id": 5,
        "name":"Свойства",
        "count":"countCSS",
        "textModule": "Конечно, давай поговорим о некоторых основных свойствах CSS, которые используются для стилизации веб-страниц: 1. **color**: Устанавливает цвет текста элемента..example {color: blue;}2. **font-size**: Устанавливает размер шрифта элемента..example {font-size: 16px;}3. **background-color**: Устанавливает цвет фона элемента..example { background-color: lightgrey;}4. **font-family**: Устанавливает шрифт элемента..example {font-family: 'Arial', sans-serif;}5. **padding**: Устанавливает внутренний отступ элемента..example {padding: 10px;}6. **margin**: Устанавливает внешний отступ элемента..example {margin: 20px;}7. **border**: Устанавливает рамку вокруг элемента..example { border: 1px solid black;} 8. **text-align**: Выравнивает текст внутри элемента..example { text-align: center;}Это лишь малая часть всех свойств CSS, которые можно использовать для создания красивого и функционального дизайна веб-страниц. Если у тебя есть конкретный элемент или задача, с которыми тебе нужна помощь, обращайся - я всегда рада помочь с CSS! 🎨✨"
    },
    {   
        "id": 6,
        "name":"Запуск",
        "count":"countJS",
        "textModule": "Чтобы запустить JavaScript код, тебе понадобится интерпретатор. Если у тебя есть среда разработки, например Node.js или браузер, ты можешь создать новый файл с расширением .js и внести свой код в него. После этого запусти его с помощью интерпретатора JavaScript."
    },
    {   
        "id": 7,
        "name":"Node.js",
        "count":"countJS",
        "textModule": "Node.js - это среда выполнения JavaScript, построенная на движке V8 от Google, который также используется в браузере Chrome. Node.js позволяет запускать JavaScript код на стороне сервера, в отличие от браузера, где JavaScript обычно выполняется на стороне клиента.Основные преимущества Node.js:1. Высокая производительность: благодаря неблокирующему вводу/выводу Node.js может обрабатывать большое количество одновременных запросов эффективно.2. Масштабируемость: Node.js позволяет легко масштабировать приложения благодаря асинхронной обработке запросов.3. JavaScript: разработчики, уже знакомые с JavaScript, могут использовать его и на сервере, что упрощает переход от фронтенда к бэкенду.Node.js широко используется для создания веб-приложений, API, микросервисов, чат-ботов и других приложений. Он также популярен в разработке сетевых приложений и приложений реального времени.Забавный факт: логотип Node.js представляет собой жемчужину, ассоциирующуюся с высокой производительностью и ценностью, а также внешний вид панголина, который символизирует защиту и надёжность. 🐚🦔Если у тебя есть какие-то конкретные вопросы или хочешь узнать еще что-то, спрашивай обязательно! 🌟"
    },
    {   
        "id": 8,
        "name":"Основы JS",
        "count":"countJS",
        "textModule": "JavaScript - это язык программирования, который широко используется для создания интерактивных веб-страниц. Вот несколько основных концепций, которые стоит знать:1. **Переменные (Variables)**: Переменные используются для хранения данных. В JavaScript переменные объявляются с помощью ключевого слова let, const или var. 2. **Типы данных (Data Types)**: JavaScript имеет различные типы данных, такие как строка (string), число (number), логическое значение (boolean), массив (array), объект (object) и другие.3. **Операторы (Operators)**: JavaScript поддерживает различные математические операторы (+, -, *, /), операторы сравнения (==, !=, >, <) и логические операторы (&&, ||, !).4. **Условные операторы (Conditional Statements)**: Условные операторы, такие как if, else if и else, используются для принятия решений в зависимости от условий.5. **Циклы (Loops)**: Циклы, такие как for и while, используются для выполнения повторяющихся действий.6. **Функции (Functions)**: Функции позволяют упаковывать куски кода и использовать их многократно. Функции объявляются с помощью ключевого слова function.7. **Объекты (Objects)**: Объекты используются для организации данных и функциональности в более сложные структуры.8. **События (Events)**: JavaScript позволяет реагировать на события, такие как щелчки мыши или нажатия клавиш.Это лишь малая часть основ JavaScript."
    }

]}